"""
The interface described here is used for simulated order handling
mechanism that ultimately tie into a brokerage or other means of market
connectivity.

In it's current form the interface is exceedingly simple and highly
unrealistic, but serves as a good baseline for improvement.

Todo:
    Make it work.
"""
from abc import ABC, abstractmethod
import datetime
import queue

from events import FillEvent, OrderEvent, Event

class ExecutionHandler(ABC):
    """
    This abstract class handles the interaction between a set of order
    objects generated by Portfolio classes and the ultimate set of
    fill objects that actually occur in the market.

    Todo:
        Create subclasses for simulated and live brokerages.
    """
    @abstractmethod
    def execute_order(self, event: OrderEvent):
        """
        Takes an OrderEvent and executes it on a platform.
        FillEvent is generated and placed into event queue.
        
        Args:
            event: Event object with order information.
        """
        raise NotImplementedError("Must implement execute_order()")

class SimulatedExecutionHandler(ExecutionHandler):
    """
    The simple version of the simulated execution handler converts all
    order objects into their equivalent fill objects without any
    additional data that would usually accompany such fill objects,
    such as latency, slippage, fill-ration issues, etc.

    This allows a straightforward "first go" test of any strategy,
    before implementation with a more sophisticated execution handler.
    """
    def __init__(self, events: queue) -> None:
        """
        Initializes the handler while setting up the event queue.
        
        Args:
            events: the event queue for the duration of the program.
        """
        self.events = events
    
    def execute_order(self, event: Event) -> None:
        """
        Simply converts an OrderEvent into Fill objects naively
        without providing any additional info.

        Args:
            event: OrderEvent object that is used to create Fill.

        Todo:
            Remove the if event.type == ... statement.
        """
        if event.type == "ORDER":
            # "ARCA" string is simply a placeholder
            fill_event = FillEvent(datetime.datetime.utcnow(), event.symbol,
                    "ARCA", event.quantity, event.direction, None)
            self.events.put(fill_event)

